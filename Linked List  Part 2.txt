1->
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        ListNode* temp = head;
        int n = 0;
        while(temp != NULL){
            n++;
            temp = temp->next;
        }
        if(n == 1) return NULL;
        if(n == 2){
            head->next = NULL;
            return head;
        } 
        temp = head;
        for(int i = 0; i < n/2 - 1; i++){
            temp = temp->next;
        }
        temp->next = temp->next->next;
        return head;
    }
};


2->
class Solution {
public:
    ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {
        ListNode* tempB = list1;
        for(int i = 0; i < b+1; i++){
            tempB = tempB->next;
        }
        ListNode* tempA = list1;
        for(int i = 0; i < a-1; i++){
            tempA = tempA->next;
        }
        tempA->next = list2;
        while(list2->next != NULL){
            list2 = list2->next;
        }
        list2->next = tempB;
        return list1;
    }
};

3->

class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        ListNode* temp = head;
    int n = 0;
    
    while (temp != nullptr) {
        n++;
        temp = temp->next;
    }

    if (k > n) return head;

    temp = head;
    for (int i = 1; i < k; i++) {
        temp = temp->next;
    }
    ListNode* first = temp;

    ListNode* t = head;
    for (int i = 1; i < n - k + 1; i++) {
        t = t->next;
    }
    ListNode* second = t;

    std::swap(first->val, second->val);

    return head;
    }
};

4->

5->
int lengthOfLoop(Node *head) {
    // Write your code here
    Node* temp = head->next;
    int n = 0;
    while(temp->data == head->data){
        n++;
        temp = temp->next;
        
    }
    return n;
}